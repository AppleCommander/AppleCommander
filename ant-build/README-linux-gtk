If you install libswt-gtk using the distribution's package manager,
launch AppleCommander using a script such as this:

#!/bin/sh
java -Djava.library.path=/usr/lib/jni \
     -cp /usr/lib/java/swt-gtk-3.5.1.jar:AppleCommander-1.3.5.11.jar \
     com.webcodepro.applecommander.ui.AppleCommander -swt

This is a highly experimental Linux GTK compile of AppleCommander.  This version does
not require Java nor does it require the SWT distribution - it is compiled into a 
native Linux executable.

To launch AppleCommander:
    $ cd <AppleCommander directory>
    $ ./applecommander.sh

Let me know if this works for you.

Thanks!
RobGreene at users.sourceforge.net

Items of note:

1.  The graphics libraries that AppleCommander use are either in a Sun JVM or
    in JDK 1.4.x - neither of which GCJ supports.  All graphics options are
    disabled (if they aren't, they certainly won't do anything).  Yes, 
    GraphicsFileFilter.java was hacked to bits for this part.

2.  The libraries that GCJ requires are listed here.  My Linux/Unix is rusty
    enough that I have no clue if they are standard or not:
        $ ldd AppleCommander
        libgcc_s.so.1 => /lib/libgcc_s.so.1 (0x40023000)
        libgcj.so.3 => /usr/lib/libgcj.so.3 (0x4002c000)
        libm.so.6 => /lib/i686/libm.so.6 (0x40612000)
        libz.so.1 => /usr/lib/libz.so.1 (0x40634000)
        libdl.so.2 => /lib/libdl.so.2 (0x40642000)
        libc.so.6 => /lib/i686/libc.so.6 (0x42000000)
        libpthread.so.0 => /lib/i686/libpthread.so.0 (0x40645000)
        /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)

3.  I do not have the full GTK development environment.  Thus, the two *.so
    libraries that are distributed and the need to launch AppleCommander from
    applecommander.sh to setup LD_LIBRARY_PATH.

4.  For those interested, I have build files (not Makefiles) that will be
    posted in the build subdirectory of the AppleCommander source files on
    SourceForge.net.  Note that the copy of SWT source that I obtained from 
    eclipse.org had pieces that would not compile -
    * org.eclipse.swt.custom.DisplayRenderer.java
        Added the following explicit import:
            import org.eclipse.swt.custom.StyledText.LineCache;
        Not sure - this may be a GCJ issue.
    * org.eclipse.swt.custom.TableCursor.java
        Changed "void traverse(...)" to "boolean traverse(...)" and added
        returns to return the same value as "event.doit".  This is because
        the method that is over-ridden returns a boolean - so this class
        could/should never have compiled before, right?
    * org.eclipse.swt.internal.gtk.GtkSelectionData.java
    * org.eclipse.swt.internal.gtk.GtkTargetEntry.java
        Both of these classes were "mangled".  I basically had to replace/fix
        the newline character through the file.

*** END ***
